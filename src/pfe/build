mvn -f iterative-dev/pom.xml clean package -DskipTests
EC=$?
if [ $EC -ne 0 ]; then
    echo "iterative-dev build failed with exit code " $EC
    exit 1;
fi

# monitoring-api.jar is required by the profiling-parser to parse .hcd files.
# It isn't published to a maven repository.
docker container rm profiling-parser-deps
docker run -it --name profiling-parser-deps websphere-liberty:19.0.0.9-webProfile7 true
docker cp profiling-parser-deps:/opt/ibm/java/jre/lib/tools/monitoring-api.jar profiling-parser/monitoring-api.jar
mvn install:install-file -Dfile=profiling-parser/monitoring-api.jar -DgroupId=com.ibm.java.diagnostics.healthcenter -DartifactId=com.ibm.java.diagnostics.healthcenter -Dversion=1.0 -Dpackaging=jar

mvn -f profiling-parser/pom.xml clean package -DskipTests
EC=$?
if [ $EC -ne 0 ]; then
    echo "profiling-parser build failed with exit code " $EC
    exit 1;
fi

# read and source the .env file
env_file=./devbuild.env

if [ -f $env_file ]; then
    set -o allexport
    source $env_file
    set +o allexport
else
    # by default fallback to production mode and turn off code coverage
    NODE_ENV=production
    ENABLE_CODE_COVERAGE=false
fi

# Overwrite env_file and default with exported environment variables if set
if [ ! -z "$PFE_DEV_NODE_ENV" ]; then
    NODE_ENV=$PFE_DEV_NODE_ENV
fi

if [ ! -z "$PFE_CODE_COVERAGE" ]; then
    ENABLE_CODE_COVERAGE=$PFE_CODE_COVERAGE
fi

echo "Building PFE with NODE_ENV: $NODE_ENV"

docker build -t eclipse/codewind-pfe-$(../../script/platform.sh) \
--file $1 \
--label "org.opencontainers.image.created=$(date '+%Y-%m-%dT%k:%M:%S%z')" \
--label "org.opencontainers.image.revision=$(git rev-parse HEAD)" \
--label "org.opencontainers.image.version=" \
--build-arg IMAGE_BUILD_TIME=`date '+%Y%m%d-%H%M%S'` \
--build-arg NODE_ENV=$NODE_ENV \
--build-arg ENABLE_CODE_COVERAGE=$ENABLE_CODE_COVERAGE \
.
